name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DEPLOY_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace
      
      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
      
      - name: Prepare Deployment Directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          use_insecure_cipher: true
          command_timeout: "1m"
          script_stop: true
          script: |
            # Buat direktori jika belum ada
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S mkdir -p ${{ secrets.DEPLOY_PATH }}
            # Setel izin sementara untuk user deploy
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chown -R ${{ secrets.DEPLOY_USER }}:${{ secrets.DEPLOY_USER }} ${{ secrets.DEPLOY_PATH }}
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chmod -R 775 ${{ secrets.DEPLOY_PATH }}
      
      - name: Deploy with rsync
        run: |
          # Salin file server.js
          cp server.js dist/
          # Salin package.json untuk production
          cp package.json dist/
          # Salin .env jika ada
          cp .env* dist/ 2>/dev/null || true
          
          rsync -avz --delete ./dist/ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}
      
      - name: Set Final Permissions and Restart Nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          use_insecure_cipher: true
          command_timeout: "1m"
          script_stop: true
          script: |
            # Setel izin final untuk web server
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chown -R www-data:www-data ${{ secrets.DEPLOY_PATH }}
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chmod -R 755 ${{ secrets.DEPLOY_PATH }}
            
            # Periksa keberadaan .env
            echo "Checking .env files..."
            ls -la ${{ secrets.DEPLOY_PATH }}/.env* || echo "No .env files found"
            
            # Buat .env jika tidak ada
            if [ ! -f "${{ secrets.DEPLOY_PATH }}/.env" ]; then
                echo "Creating .env file..."
                echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S bash -c 'cat > ${{ secrets.DEPLOY_PATH }}/.env << EOL
                NODE_ENV=production
                PORT=3000
                EOL'
            fi
            
            # Setel izin .env
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chown www-data:www-data ${{ secrets.DEPLOY_PATH }}/.env
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chmod 600 ${{ secrets.DEPLOY_PATH }}/.env
            
            # Install dependencies di server dengan izin yang benar
            cd ${{ secrets.DEPLOY_PATH }}
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chown -R ${{ secrets.DEPLOY_USER }}:${{ secrets.DEPLOY_USER }} .
            
            # Install dependencies production
            echo "Installing production dependencies..."
            npm install --omit=dev
            
            # Install dependencies yang diperlukan untuk SSR
            echo "Installing SSR dependencies..."
            npm install express compression serve-static
            
            # Verifikasi dependencies
            echo "Verifying dependencies..."
            ls -la node_modules/express
            ls -la node_modules/compression
            ls -la node_modules/serve-static
            
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chown -R www-data:www-data .
            
            # Periksa keberadaan dan izin server.js
            echo "Checking server.js..."
            ls -la server.js
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chmod +x server.js
            
            # Periksa isi server.js
            echo "Checking server.js content..."
            cat server.js
            
            # Jalankan server.js secara manual untuk memeriksa error
            echo "Testing server.js..."
            NODE_ENV=production node server.js || echo "Error running server.js"
            
            # Buat service file untuk Node.js dengan logging yang lebih detail
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S bash -c 'cat > /etc/systemd/system/node-app.service << EOL
            [Unit]
            Description=Node.js Application
            After=network.target

            [Service]
            WorkingDirectory=${{ secrets.DEPLOY_PATH }}
            ExecStart=/usr/bin/node server.js
            Restart=always
            RestartSec=10
            User=www-data
            Group=www-data
            Environment=NODE_ENV=production
            Environment=PORT=3000
            EnvironmentFile=${{ secrets.DEPLOY_PATH }}/.env
            Environment=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/node/bin
            StandardOutput=syslog
            StandardError=syslog
            SyslogIdentifier=node-app

            [Install]
            WantedBy=multi-user.target
            EOL'
            
            # Reload systemd dan start service
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S systemctl daemon-reload
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S systemctl enable node-app
            
            # Hapus log lama
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S journalctl --vacuum-time=1s
            
            # Start service
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S systemctl restart node-app
            
            # Tunggu sebentar untuk memastikan service berjalan
            sleep 5
            
            # Periksa status service
            echo "Checking service status..."
            systemctl status node-app
            
            # Periksa log service dengan detail
            echo "Checking service logs..."
            journalctl -u node-app -n 50 --no-pager
            
            # Periksa apakah port 3000 sedang digunakan
            echo "Checking port 3000..."
            netstat -tulpn | grep 3000 || echo "Port 3000 not in use"
            
            # Periksa izin dan kepemilikan file
            echo "Checking file permissions..."
            ls -la ${{ secrets.DEPLOY_PATH }}
            
            # Periksa apakah www-data dapat mengakses direktori
            echo "Checking www-data access..."
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S -u www-data ls -la ${{ secrets.DEPLOY_PATH }}
            
            # Periksa environment yang digunakan oleh service
            echo "Checking service environment..."
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S systemctl show node-app --property=Environment --no-pager
            
            # Periksa log systemd
            echo "Checking systemd logs..."
            journalctl -u node-app -n 50 --no-pager
            
            # Periksa log syslog
            echo "Checking syslog..."
            tail -n 50 /var/log/syslog | grep node-app || echo "No syslog entries found"
            
            # Periksa apakah server.js dapat dijalankan oleh www-data
            echo "Testing server.js as www-data..."
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S -u www-data node server.js || echo "Error running server.js as www-data"
            
            # Hapus semua konfigurasi yang ada
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S rm -f /etc/nginx/sites-enabled/*
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S rm -f /etc/nginx/sites-available/*
            
            # Buat konfigurasi Nginx baru
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S bash -c 'cat > /etc/nginx/sites-available/default << EOL
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                server_name _;
                root ${{ secrets.DEPLOY_PATH }};
                index index.html;

                # Handle SSR
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }

                # Handle /poke-fahmi path
                location /poke-fahmi {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }

                # Handle static files
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                    root ${{ secrets.DEPLOY_PATH }};
                    expires max;
                    log_not_found off;
                }
            }
            EOL'
            
            # Aktifkan konfigurasi baru
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/
            
            # Periksa konfigurasi Nginx
            echo "Checking Nginx configuration..."
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S nginx -t
            
            # Periksa error log Nginx
            echo "Checking Nginx error log..."
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S tail -n 50 /var/log/nginx/error.log
            
            # Periksa struktur file
            echo "Checking file structure..."
            ls -la ${{ secrets.DEPLOY_PATH }}
            
            # Restart Nginx
            echo "Restarting Nginx..."
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S systemctl restart nginx
            
            # Verifikasi status
            systemctl status nginx
            systemctl status node-app
